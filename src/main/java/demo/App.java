/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package demo;

import java.lang.invoke.CallSite;
import java.lang.invoke.LambdaMetafactory;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandles;
import java.lang.invoke.MethodType;
import java.lang.reflect.Method;
import java.util.function.Function;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }


    public String reflectGreeting() throws Exception {
        Method getGreeting = App.class.getMethod("getGreeting");
        return (String) getGreeting.invoke(this);
    }

    public <T> String classGreeting(Class<T> targetClass, Function<T, String> getter) throws Exception {
        if (targetClass.isInstance(this)) {
            T t = targetClass.cast(this);
            return getter.apply(t);
        }
        return "nope";
    }

    public <T> String lambaGreeting(Class<T> targetClass) throws Exception {
        try {
            Function<Object, Object> getGreeting = mkCallFunction(targetClass, "getGreeting", String.class);
            return (String) getGreeting.apply(this);
        } catch (Throwable e) {
            e.printStackTrace();
            return "nope";
        }
    }


    static Function<Object, Object> mkCallFunction(Class<?> targetClass, String targetMethod, Class<?> targetMethodReturnType) throws Throwable {
        MethodHandles.Lookup lookup = MethodHandles.lookup();
        MethodHandle virtualMethodHandle = lookup.findVirtual(targetClass, targetMethod, MethodType.methodType(targetMethodReturnType));
        CallSite site = LambdaMetafactory.metafactory(lookup,
                "apply",
                MethodType.methodType(Function.class),
                MethodType.methodType(Object.class, Object.class),
                virtualMethodHandle,
                MethodType.methodType(targetMethodReturnType, targetClass));
        @SuppressWarnings("unchecked")
        Function<Object, Object> getterFunction = (Function<Object, Object>) site.getTarget().invokeExact();
        return getterFunction;
    }

    public static void main(String[] args) throws Exception {
        App app = new App();
        System.out.printf("direct    - %s\n", app.getGreeting());
        System.out.printf("reflect   - %s\n", app.reflectGreeting());
        System.out.printf("class     - %s\n", app.classGreeting(app.getClass(), App::getGreeting));
        System.out.printf("lambda    - %s\n", app.lambaGreeting(app.getClass()));
    }
}
